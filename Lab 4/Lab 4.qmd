---
title: "Lab 4"
author: "Hanin Almodaweb"
format: html
theme: journal
embed-resources: true
fig-width: 6
fig-height: 4
---

```{r setup, message=FALSE, echo=FALSE, warning=FALSE}
#install.packages(c("data.table","leaflet"))
library(data.table)
library(leaflet)
library(tidyverse)
```

### 1. Read in the data

```{r}
fn <- "https://raw.githubusercontent.com/USCbiostats/data-science-data/master/02_met/met_all.gz"
if (!file.exists("met_all.gz"))
  download.file(fn, destfile = "met_all.gz")
met <- data.table::fread("met_all.gz")
met <- as.data.frame(met)
```

### 2. Prepare the data
-   Remove temperatures less than -17C
-   Make sure there are no missing data in the key variables coded as 9999, 999, etc
-   Generate a date variable using the functions `as.Date()` (hint: You will need the following to create a date `paste(year, month, day, sep = "-")`).
-   Using the `data.table::week` function, keep the observations of the first week of the month.
-   Compute the mean by station of the variables `temp`, `rh`, `wind.sp`, `vis.dist`, `dew.point`, `lat`, `lon`, and `elev`.
-   Create a region variable for NW, SW, NE, SE based on lon = -98.00 and lat = 39.71 degrees
-   Create a categorical variable for elevation as in the lecture slides

```{r EDIT}
# Removing temperatures less than -17C
met <- met[temp > -17]

# Replacing missing data coded as 9999, 999, etc.
met <- met[elev == 9999.0, elev := NA]

# Generating date variable for week
met[, week := week(as.Date(paste(year, month, day, sep = "-")))]

# Keeping only the data from the first week of the month
met <- met[week == min(week, na.rm = TRUE)]

# Computing means by station in table met_avg
met_avg <- met[,.(temp=mean(temp,na.rm=TRUE), rh=mean(rh,na.rm=TRUE), wind.sp=mean(wind.sp,na.rm=TRUE), 
                vis.dist=mean(vis.dist,na.rm=TRUE), dew.point = mean(dew.point, na.rm=TRUE), lat=mean(lat), lon=mean(lon), 
                elev=mean(elev,na.rm=TRUE)), by="USAFID"]

# Creating categorical variable for elevation
met_avg$elev_cat <- ifelse(met_avg$elev> 252, "high", "low")

# Creating a region variable by categorizing data based on latitude and longitude
met_avg$region <- ifelse(met_avg$lon > -98 & met_avg$lat >39.71, "north east",
                         ifelse(met_avg$lon > -98 & met_avg$lat < 39.71, "south east",
                                ifelse(met_avg$lon < -98 & met_avg$lat >39.71, "north west", "south west")))

table(met_avg$region)
```

### 3. Use `geom_violin` to examine the wind speed and dew point by region

You saw how to use `geom_boxplot` in class. Try using `geom_violin` instead (take a look at the help).
(hint: You will need to set the `x` aesthetic to 1)

- Use facets
- Make sure to deal with `NA`s
- Describe what you observe in the graph

```{r}
# Geom_violin for wind speed
met_avg |>
  filter(!(region %in% NA)) |>
ggplot()+
  geom_violin(mapping = aes(y=wind.sp, x=1)) +
  facet_wrap(~region, nrow=2)

# Geom_violin for dew point
met_avg |>
  filter(!(region %in% NA)) |>
ggplot()+
  geom_violin(mapping = aes(y=dew.point, x=1)) +
  facet_wrap(~region, nrow=2)

# Boxplot for dew point comparison
met_avg |>
  filter(!(region %in% NA)) |>
ggplot()+
  geom_boxplot(mapping = aes(y=dew.point, fill=region)) +
  facet_wrap(~region, nrow=2)
```

DESCRIBING OBSERVATIONS

### 4. Use `geom_jitter` with `stat_smooth` to examine the association between dew point and wind speed by region
-   Color points by region
-   Make sure to deal with `NA`s
-   Fit a linear regression line by region
-   Describe what you observe in the graph

```{r}
met_avg |>
filter(!(region %in% NA)) |>
  ggplot(mapping = aes(x=dew.point, y=wind.sp, color=region))+
  geom_jitter() + 
  stat_smooth(method=lm)
```

DESCRIBING OBSERVATIONS

### 5. Use `geom_bar` to create barplots of the weather stations by elevation category colored by region
-   Bars by elevation category using `position="dodge"`
-   Change colors from the default. Color by region using `scale_fill_brewer` see [this](http://rstudio-pubs-static.s3.amazonaws.com/5312_98fc1aba2d5740dd849a5ab797cc2c8d.html)
-   Create nice labels on the axes and add a title
-   Describe what you observe in the graph
-   Make sure to deal with `NA` values

```{r}
met_avg |>
filter(!(region %in% NA)) |>
  ggplot()+
  geom_bar(mapping=aes(x=elev_cat,fill=region), position = "dodge")+
  scale_fill_brewer(palette = "PiYG")+
  labs(title="Number of weather stations by elevation category and region", x="Elevation Category", y= "Count")+
  theme_bw()
```

DESCRIBING OBSERVATIONS

### 6. Use `stat_summary` to examine mean dew point and wind speed by region with standard deviation error bars
-   Make sure to remove `NA`s
-   Use `fun.data="mean_sdl"` in `stat_summary`
-   Add another layer of `stats_summary` but change the geom to `"errorbar"` (see the help).
-   Describe the graph and what you observe

```{r}
met_avg |>
filter(!(region %in% NA)) |>
  ggplot(mapping=aes(x=region, y=dew.point)) +
  stat_summary(fun.data="mean_sdl", geom="errorbar") +
  stat_summary(fun.data="mean_sdl")
met_avg |>
filter(!(region %in% NA)) |>
  ggplot(mapping=aes(x=region, y=wind.sp)) +
  stat_summary(fun.data="mean_sdl", geom="errorbar") +
  stat_summary(fun.data="mean_sdl")
```

DESCRIBING OBSERVATIONS

### 7. Make a map showing the spatial trend in relative humidity in the US
-   Make sure to remove `NA`s
-   Use leaflet()
-   Make a color palette with custom colors
-   Use `addMarkers` to include the top 10 places in relative humidity (hint: this will be useful `rank(-rh) <= 10`)
-   Add a legend

```{r}
met_avg2<-met_avg[!is.na(rh)]
# Top 10
top10 <- met_avg2[rank(-rh) <= 10]
rh_pal = colorNumeric(c('pink','magenta','gold'), domain=met_avg2$rh)
leaflet(met_avg2) |>
  addProviderTiles('OpenStreetMap') |>
  addCircles(lat=~lat, lng=~lon, color=~rh_pal(rh), label=~paste0(round(rh,2), ' rh'), opacity=1,fillOpacity=1, radius=500) |>
  addMarkers(lat=~lat, lng=~lon, label=~paste0(round(rh,2), ' rh'), data = top5) |>
  addLegend('bottomleft',pal=rh_pal, values=met_avg2$rh, title="Relative Humidity", opacity=1)
```

### 8. Use a ggplot extension
-   Pick an extension (except cowplot) from [here](https://exts.ggplot2.tidyverse.org/gallery/) and make a plot of your choice using the met data (or met_avg)
-   Might want to try examples that come with the extension first (e.g. ggtech, gganimate, ggforce)

```{r}
# Make a box plot of wind speed vs temp by region using ggpattern
    ggplot(data = met_avg2) +
      geom_boxplot_pattern(mapping=aes(x=temp, y=wind.sp,fill=region), pattern = "placeholder", pattern_type = "bear") +
      labs(title="Wind speed verses temperature by region", x="Temperature (C)", y= "Wind Speed (m/s)") +
      theme_minimal()

# Histogram of elevation by region using ggpattern
    ggplot(data = met_avg2) +
      geom_histogram_pattern(mapping=aes(x=elev,fill=region, pattern = "stripe"), position = "identity") +
      labs(title="Histogram of elevation by region", x="Elevation (m)") +
      theme_minimal()
```

